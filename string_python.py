# -*- coding: utf-8 -*-
"""STRING Questions Python Assignment-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-ENVx_geE--gQbfcfsQOKIBuvHszMpQ
"""

#Q1. Python program to check whether the string is Symmetrical or Palindrome

def is_palindrome(s):
    return s == s[::-1]

def is_symmetrical(s):
    length = len(s)
    mid = length // 2
    if length % 2 == 0:
        return s[:mid] == s[mid:]
    else:
        return s[:mid] == s[mid+1:]

string = "abcabc"
if is_symmetrical(string):
    print("The entered string is symmetrical")
else:
    print("The entered string is not symmetrical")

if is_palindrome(string):
    print("The entered string is palindrome")
else:
    print("The entered string is not palindrome")

#Q2. Reverse words in a given String in Python.

string = "Creativity but Nothing"
words = string.split()
words = list(reversed(words))
print(" ".join(words))

#Q3. Ways to remove i’th character from string in Python.

def remove_char(string, i):
  return string[:i] + string[i + 1:]

string = "Hello, World!"
i = 7
new_string = remove_char(string, i)
print(new_string)

#Q4. Find length of a string in python (4 ways).

#1. len function
Mak2001 = "MANISHA"
print(len(Mak2001))

#2. Using for loop and in operator
Mak2001 = "MANISHA"
def len(Mak2001):
	counter = 0
	for i in Mak2001:
		counter += 1
	return counter

print(len(Mak2001))

#3. Using while loop and Slicing.
Mak2001 = "MANISHA"
def len(Mak2001):
	counter = 0
	while Mak2001[counter:]:
		counter += 1
	return counter

print(len(Mak2001))

#4. Using reduce method.
Mak2001 = "MANISHA"
import functools
def len(Mak2001):
	return functools.reduce(lambda x,y: x+1, Mak2001, 0)

print(len(Mak2001))

#Q5. Python – Avoid Spaces in string length.

Mak2001 = 'Nothing but Creativity'
Mak2001=Mak2001.replace(' ','')
res=len(Mak2001)
print(str(res))

#Q6. Python program to print even length words in a string.

Mak2001="Nothing but Creativity ok"
s=Mak2001.split(" ")
for i in s:

 if len(i)%2==0:
	 print(i)

#Q7. Python – Uppercase Half String.

Mak2001="NothingbutCreativity"
Mak2002 = len(Mak2001) // 2
Mak2003 = Mak2001[:Mak2002] + Mak2001[Mak2002:].upper()
print(str(Mak2003))

#Q8. Python program to capitalize the first and last character of each word in a string.
Mak2001="Nothing but Creativity"
a = Mak2001.split()
Mak2002 = []
for i in a:
    x = i[0].upper()+i[1:-1]+i[-1].upper()
    Mak2002.append(x)
Mak2002 = " ".join(Mak2002)
print(Mak2002)

#9. Python program to check if a string has at least one letter and one number.

def checkString(str):

	letter = False
	number = False

	for i in str:

		if i in "abcdefghijklmnopqrstuvwxyz":
			letter = True

		if i in "0123456789":
			number = True

	return letter and number

print(checkString("Mak2001"))
print(checkString("Nothing but Creativity"))

#10. Program to accept the strings which contains all vowels.

def check_vowels(string):

   vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']

   for char in string:
      if char not in vowels:
       print(f"{string}: Not accepted")
      break
   else:
      print(f"{string}: Accepted")
if __name__ == '__main__':

   Mak2001 = "Happy"

   check_vowels(Mak2001)

#Q11. Count the Number of matching characters in a pair of string

Mak2001 = "Manisha AAFT"
uniq_Mak2001 = set(Mak2001)

Mak2002 = "aFdhn"
uniq_Mak2002 = set(Mak2002)

common_chars = uniq_Mak2001 & uniq_Mak2002
print(len(common_chars))

#Q12. program to count number of vowels using sets in given string

Mak2001 = "NothingbutCreativity"
vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']

count = sum(Mak2001.count(vowel) for vowel in vowels)
print(count)

#Q13. Program to remove all duplicates from a given string

Mak2001 = "NothingbutCreativity"
print(remove_duplicate(Mak2001))

#Q14. Least Frequent Character in String

Mak2001 = "NothingbutCreativity"
char_freq={}
for i in Mak2001:
    if i in char_freq:
        char_freq[i]=char_freq[i]+1
    else:
        char_freq[i] = 1
result= min(char_freq, key = char_freq.get)
print(result)

#Q15. Maximum frequency character in String

Mak2001 = "NothingbutCreativity"
char_freq={}
for i in Mak2001:
    if i in char_freq:
        char_freq[i]=char_freq[i]+1
    else:
        char_freq[i] = 1
result= max(char_freq, key = char_freq.get)
print(result)

#Q16. Odd Frequency Characters

Occurrences = Counter("Creativity")
result = []
for char, count in Occurrences.items():
    if count % 2 != 0:
        result.append(char)

print(result)

#Q17. Specific Characters Frequency in String List

def count_characters(string_list, characters):

    char_counts = {}
    for char in characters:
        char_counts[char] = 0

    for string in string_list:
        for char in string:
            if char in characters:
                char_counts[char] += 1

    return char_counts


Mak2001 = ["Nothing but Creativity"]
chars_to_count = "atiou"
result = count_characters(Mak2001, chars_to_count)
print(result)

#Q18. Frequency of numbers in String

def count_characters(string_list, characters):

    char_counts = {}
    for char in characters:
        char_counts[char] = 0

    for string in string_list:
        for char in string:
            if char in characters:
                char_counts[char] += 1

    return char_counts


Mak2001 = ["Nothing2 but 5Creativity"]
chars_to_count = "253"
result = count_characters(Mak2001, chars_to_count)
print(result)

#Q19. Program to check if a string contains any special character

Mak2001 = "Nothing but Creativity!"
def has_special_char(Mak2001):
   output = any(c in string.punctuation for c in Mak2001)
   if output == True:
      print(Mak2001, "has the special characters in it")
   else:
      print(Mak2001, "has no special characters in it")
has_special_char(Mak2001)

#Q20. Generating random strings until a given string is generated

possibleChar = string.ascii_lowercase + string.digits + string.ascii_uppercase + ' ., !?;:'


Mak2001 = "abc"

attemptThis = ''.join(random.choice(possibleChar) for i in range(len(Mak2001)))
attemptNext = ''

done= False
iteration = 0

while done == False:
    print(attemptThis)

    attemptNext = ''
    done = True


    for i in range(len(Mak2001)):
        if attemptThis[i] != Mak2001[i]:
            done = False
            attemptNext += random.choice(possibleChar)
        else:
            attemptNext += Mak2001[i]

    iteration = iteration + 1
    attemptThis = attemptNext
    time.sleep(0.1)

print("Target matched after ",iteration," iterations")

#Q21. Find words which are greater than given length k

def string_k(k, Mak2001):

	string = []
	text = str.split(" ")
	for x in text:
		if len(x) > k:
			string.append(x)
	return string

k = 7
Mak2001 = "Nothing but Creativity"
print(string_k(k, Mak2001))

#Q22. Python program for removing i-th character from a string

def removechar(Mak2001, n):
	x = Mak2001[ : n]
	y = Mak2001[n + 1: ]
	return x + y

if __name__ == '__main__':
	Mak2001 = "Creativity"

	n = 2

	print(removechar(Mak2001, n))

#Q23. Python program to split and join a string

Mak2001 = 'Nothing but Creativity'
Separator = '-'

splitting = Mak2001.split(' ')
joining = Separator.join(splitting)

print('The string after splitting is :',splitting)
print('The string after performing join is:',joining)

#Q24. Check if a given string is binary string or not

Mak2001 = '0110101010111'
b = {'0','1'}
t = set(Mak2001)

if b == t or t == {'0'} or t == {'1'}:
 print("Mak2001 is a binary string.")
else:
 print("Mak2001 is not a binary string.")

Mak2002 = '0120101010111'
u = set(Mak2002)

if b == u or u == {'0'} or u == {'1'}:
 print("Mak2002 is a binary string.")
else:
 print("Mak2002 is not a binary string.")

#Q25. Find all close matches of input string from a list

Mak2001 = ["Nothing", "No", "Creativity", "Creat", "Cr"]
element = "Creativity"
for string in Mak2001:
   if string.startswith(element) or element.startswith(string):
      print(string, end = " ")
print()

#Q26. program to find uncommon words from two Strings

def uncommon_words(Mak2001, Mak2002):
    count = {}
    for word in Mak2001.split():
        count[word] = count.get(word, 0) + 1

    for word in Mak2002.split():
        count[word] = count.get(word, 0) + 1

    return [word for word in count if count[word] == 1]

Mak2001="Creativity"
Mak2002="Nothing but Creativity"

print(uncommon_words(Mak2001, Mak2002))

#Q27. Swap commas and dots in a String

def Replace(str1):
	maketrans = str1.maketrans
	final = str1.translate(maketrans(',.', '.,', ' '))
	return final.replace(',', ", ")

Mak2001 = "manisha,aaft.com"
print(Replace(Mak2001))

#Q28. Permutation of a given string using inbuilt function

Mak2001 = "MAK"
permutaion_list = list(itertools.permutations(Mak2001))
for tup in permutaion_list:
   print("".join(tup))

#Q29. Check for URL in a String

def Find(Mak2001):

	regex = r"(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))"
	url = re.findall(regex, Mak2001)
	return [x[0] for x in url]

Mak2001 = 'https://www.w3schools.com/python/default.asp in the portal of https://www.w3schools.com//'
print("Urls: ", Find(Mak2001))

#Q30. Execute a String of Code in Python

Mak2001 = '"hello" + "world"'
result = eval(Mak2001)
print(result)

Mak2001 = '["a", "b", "c"][1]'
result = eval(Mak2001)
print(result)

#Q31. Convert numeric words to numbers

help_dict = {
	'one': '1',
	'two': '2',
	'three': '3',
	'four': '4',
	'five': '5',
	'six': '6',
	'seven': '7',
	'eight': '8',
	'nine': '9',
	'zero': '0'
}

Mak2001 = "zero four zero one"
print(Mak2001)
res = ''.join(help_dict[ele] for ele in Mak2001.split())
print(res)

#Q32. Word location in String

Mak2001 = "Nothing but Creativity, Right!"
word = "Creativity"
position = Mak2001.find(word)

if position != -1:
    print(f"The word '{word}' is found at position {position}.")
else:
    print(f"The word '{word}' was not found.")

#Q33. Consecutive characters frequency

def consecutive_char_frequency(Mak2001):
    frequency = Counter()

    for i in range(len(Mak2001) - 1):
        consecutive_pair = Mak2001[i:i+2]
        frequency[consecutive_pair] += 1
    return frequency

Mak2001 = "aabbbccccddee"
result = consecutive_char_frequency(Mak2001)
print(result)

#Q34. String slicing in Python to rotate a string

def rotate(str1,n):

	temp = str1 + str1
	l1 = len(str1)
	l2 = len(temp)
	Lfirst = temp[n : l1+n]
	Lfirst = temp[l1-n : l2-n]

	print ("Left Rotation : ", Lfirst)
	print ("Right Rotation : ", Lfirst )

if __name__ == "__main__":
	Mak2001 = "NothingbutCreativity"
	d=2
	rotate(Mak2001,d)

#Q35. String slicing in Python to check if a string can become empty by recursive deletion

def checkEmpty(input, pattern):

	if len(input)== 0 and len(pattern)== 0:
		return 'true'

	if len(pattern)== 0:
		return 'false'

	while (len(input) != 0):

		index = input.find(pattern)

		if (index ==(-1)):
			return 'false'

		input = input[0:index] + input[index + len(pattern):]
	return 'true'

if __name__ == "__main__":
	input ='GEEGEEKSKS'
	pattern ='GEEKS'
	print (checkEmpty(input, pattern))

#Q36. Python Program to find minimum number of rotations to obtain actual string

def min_rotations_bf(Mak2001, Mak2002):
   min_rotations = float('inf')

   for i in range(len(Mak2001)):
      rotated = Mak2001[i:] + Mak2001[:i]
      if rotated == Mak2002:
         min_rotations = min(min_rotations, i)

   if min_rotations == float('inf'):
      return -1
   else:
      return min_rotations

Mak2001 = "Nothing"
Mak2002 = "Creativity"
bf_result = min_rotations_bf(Mak2001, Mak2002)

print("String 1:", Mak2001)
print("String 2:", Mak2002)
print("Minimum rotations (Brute Force):", bf_result)

#Q37. Words Frequency in String Shorthands

Mak2001=" Hello World in this Programming World"
word= {key: string.count(key) for key in string.split()}
print(word)

#Q38. Successive Characters Frequency

import re
import itertools
from collections import Counter

test_str = 'geeksforgeeks is best for geeks. A geek should take interest.'
que_word = 'geek'

matches = re.findall(que_word + '(.)', test_str)
groups = itertools.groupby(matches)

freq_dict = Counter([char for _, char_group in groups for char in char_group])

print('The Characters Frequency is:', freq_dict)

#Q39. Sort String list by K character frequency

def sort_by_k_char_frequency(strings, k):

    def key_func(string):
        if len(string) < k:
            return 0
        return string.count(string[k - 1])

    return sorted(strings, key=key_func, reverse=True)

strings = ["hello", "world", "apple", "banana"]
k = 2

print(sort_by_k_char_frequency(strings, k))

#Q40. Convert Snake case to Pascal case

def snake_to_pascal(snake_str):
    return ''.join(word.capitalize() for word in snake_str.split('_'))

snake_str = "Nothing_but_Creativity"
pascal_str = snake_to_pascal(snake_str)
print(pascal_str)

#Q41. Avoid Last occurrence of delimitter

Mak2001 = "a,b,c,d"
result = string.rsplit(',', 1)
print(result)

#Q42. Python program to find the character position of Kth word from a list of strings

Mak2001 = ["Nothing", "but", "Creativity",]

print("The list is :")
print(Mak2001)

K = 15
print("The value of K is :")
print(K)

my_result = [element[0] for sub in enumerate(Mak2001) for element in enumerate(sub[1])]

my_result = my_result[K]

print("The result is :")
print(my_result)

#Q43. Right and Left Shift characters in String

#Left Shift:
def left_shift(s, n):
  return s[n:] + s[:n]

text = "Hello"
shifted = left_shift(text, 2)
print(shifted)

#Right Shift:
def right_shift(s, n):
  return s[-n:] + s[:-n]

text = "Hello"
shifted = right_shift(text, 2)
print(shifted)

#Q44. Exceptional Split in String

try:
    string = "Hello, World!"
    result = re.split(r"[^\w\s]", string)
except ValueError as e:
    print("Error splitting string:", e)
else:
    print(result)

#Q45. Split String on vowels

def split_on_vowels(test_str):
	vowels = 'aeiouAEIOU'
	result = []
	temp = ""
	for char in test_str:
		if char in vowels:
			if temp != "":
				result.append(temp)
				temp = ""
		else:
			temp += char
	if temp != "":
		result.append(temp)
	return result

test_str = 'GFGaBstuforigeeks'
print(split_on_vowels(test_str))

#Q46. Mirror Image of String

Mak2001 = "boid"

mir_dict = {'b':'d', 'd':'b', 'i':'i', 'o':'o',}
res = ''

for ele in Mak2001:
	if ele in mir_dict:
		res += mir_dict[ele]

	else:
		res = "Not Possible"
		break

print(str(res))

#Q47. Replace multiple words with K

Mak2001 = "Be the change that you wish to see in others"
word_list = ["others", 'that', 'the']
repl_wrd = 'ok'

res = ' '.join([repl_wrd if idx in word_list else idx for idx in Mak2001.split()])

print(str(res))

#Q48. Replace Different characters in String at Once

Mak2001 = "Nothing but Creativity"
map_dict = {'e': '1', 'b': '6', 'i': '4'}

res = ''.join(
	idx if idx not in map_dict else map_dict[idx] for idx in Mak2001)

print(str(res))

#Q49. Multiple indices Replace in String

Mak2001= "Nothing but Creativity"
indices = [0, 6, 13]
for index in indices:
    Mak2001= Mak2001[:index] + '#' + Mak2001[index+1:]
print(Mak2001)

#Q50. Ways to remove multiple empty spaces from string List

Mak2001 = ["Nothing","","but","","Creativity",""]
updated_list = list(filter(None, Mak2001))
print(updated_list)

#Q51. Remove punctuation from string

Mak2001 = 'Nothing, but: Creativity! ok;'
Mak2001 = Mak2001.translate(str.maketrans('', '', string.punctuation))
print(Mak2001)

#Q52. Similar characters Strings comparison

Mak2001 = 'c:r:e:a:t:i:v:i:t:y'
Mak2002 = 't:i:v:c:e:r:a:i:t:y'

delim = ':'

res = sorted(Mak2001.split(':')) == sorted(Mak2002.split(':'))

print(str(res))

#Q53. Remove K length Duplicates from String

class Solution:
   def solve(self, s, k):
      while True:
         count = 0
         chars = set(s)
         for c in chars:
            if c * k in s:
               s = s.replace(c * k, "")
               count += 1
         if count == 0:
            break
      return s

ob = Solution()
s = "paaappmmmma"
k = 3
print(ob.solve(s, k))

#Q54. Remove suffix from string list

Mak2001 = "Doctorate"
suffix_name = "ate"
if Mak2001.endswith( suffix_name ):
   Mak2001 = Mak2001[ :len(Mak2001)-len(suffix_name) ]
print( "After deleting the given suffix:", Mak2001 )

#Q55. Find all duplicate characters in string

def find_dup_char(Mak2001):
	x=[]
	for i in Mak2001:
		if i not in x and Mak2001.count(i)>1:
			x.append(i)
	print(" ".join(x))

if __name__ == "__main__":
	Mak2001 = 'nothingbutcreativity'
	find_dup_char(Mak2001)

#Q56. Replace duplicate Occurrence in String

Mak2001 = "Today is better than tomorrow, tomorrow will be better than today"

replace_dict = {"today" : "yesterday"}
my_list = Mak2001.split(' ')
my_result = ' '.join([replace_dict.get(val) if val in replace_dict.keys() and
                      my_list.index(val) != idx else val for idx,
                      val in enumerate(my_list)])

print(my_result)

#Q57. Ways to convert string to dictionary

#1. Splitting a string to generate a key
Mak2001 = " Jan = January; Feb = February; Mar = March"
dictionary = dict(subString.split("=") for subString in Mak2001.split(";"))
print(dictionary)

#2. Using zip() method to combine the key
Mak2001 = "Jan, Feb, March"
Mak2002 = "January | February | March"

keys = Mak2001.split(", ")
values = Mak2002.split("|")
dictionary = {}
dictionary = dict(zip(keys, values))

print(dictionary)

#Q58. Check if two strings are Rotationally Equivalent

def are_rotationally_equivalent(Mak2001, Mak2002):

    if len(Mak2001) != len(Mak2002):
        return False

    return Mak2002 in (Mak2001 + Mak2001)

Mak2001 = "abc"
Mak2002 = "bca"
print(are_rotationally_equivalent(Mak2001, Mak2002))

#Q59. Test if string is subset of another

Mak2001 = "Nothing but Creativity"
Mak2002 = "Creat"

res = all(ele in Mak2001 for ele in Mak2002)

print(str(res))

#Q60. Python Program to Generate Random binary string

def rand_key(p):

	key1 = ""

	for i in range(p):

		temp = str(random.randint(0, 1))

		key1 += temp

	return(key1)

n = 7
Mak2001 = rand_key(n)
print(Mak2001)

#Q61. Python Program to convert binary to string

def BinaryToDecimal(binary):

	binary1 = binary
	decimal, i, n = 0, 0, 0
	while(binary != 0):
		dec = binary % 10
		decimal = decimal + dec * pow(2, i)
		binary = binary//10
		i += 1
	return (decimal)

bin_data ='10001111100101110010111010111110011'

print("The binary value is:", bin_data)

str_data =' '

for i in range(0, len(bin_data), 7):

	temp_data = int(bin_data[i:i + 7])

	decimal_data = BinaryToDecimal(temp_data)

	str_data = str_data + chr(decimal_data)

print(str_data)

#Q62. Reverse Sort a String

Mak2001 = "nothingbutcreative"
res = ''.join(sorted(Mak2001, reverse = True))
print(str(res))